import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "com.adarshr.test-logger"

description = 'Play audio to discord voice channels'
mainClassName = "lavalink.server.Launcher"
ext {
    moduleName = 'Lavalink-Server'
}

bootJar {
    archiveName = "Lavalink.jar"
}

sourceCompatibility = targetCompatibility = 11

bootRun {
    //compiling tests during bootRun increases the likelihood of catching broken tests locally instead of on the CI
    dependsOn compileTestJava

    //pass in custom jvm args
    // source: https://stackoverflow.com/a/25079415
    // example: ./gradlew bootRun -PjvmArgs="--illegal-access=debug -Dwhatever=value"
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    /* Stuff we are injecting during build time, we don't want gradle to download these otherwise we will have dupliacated ones. */
    def withoutDependencies = {
        exclude group: 'com.sedmelluq', module: 'lava-common'
        exclude group: 'com.sedmelluq', module: 'lavaplayer-natives'
        exclude group: 'com.sedmelluq', module: 'udp-queue'
        exclude group: 'com.github.natanbc', module: 'native-loader'
    }
    /* Stuff we are injecting during build time. */
    implementation name: 'lava-common', version: '1.1.2'
    implementation name: 'lavaplayer-natives', version: '1.3.13'
    implementation name: 'udp-queue', version: '1.1.0'
    implementation name: 'native-loader', version: '0.7.0'

    /* PH Source */
    implementation 'org.jsoup:jsoup:1.13.1'

    compile (group: 'moe.kyokobot.koe', name: 'core', version: koeVersion) {
        // This version of SLF4J does not recognise Logback 1.2.3
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compile group: 'moe.kyokobot.koe', name: 'ext-udpqueue', version: koeVersion, withoutDependencies
    compile group: 'com.sedmelluq', name: 'lavaplayer', version: lavaplayerVersion, withoutDependencies
    compile group: 'com.sedmelluq', name: 'lavaplayer-ext-youtube-rotator', version: lavaplayerIpRotatorVersion, withoutDependencies
    compile group: 'com.github.natanbc', name: 'lavadsp', version: lavaDspVersion, withoutDependencies

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

    compile group: 'org.springframework', name: 'spring-websocket', version: springWebSocketVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    compile group: 'io.sentry', name: 'sentry-logback', version: sentryLogbackVersion
    compile group: 'com.github.oshi', name: 'oshi-core', version: oshiVersion
    compile group: 'org.json', name: 'json', version: jsonOrgVersion
    compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion) {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-undertow', version: springBootVersion
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion

    compile group: 'io.prometheus', name: 'simpleclient', version: prometheusVersion
    compile group: 'io.prometheus', name: 'simpleclient_hotspot', version: prometheusVersion
    compile group: 'io.prometheus', name: 'simpleclient_logback', version: prometheusVersion
    compile group: 'io.prometheus', name: 'simpleclient_servlet', version: prometheusVersion

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
}
version = "3.3.2.5".toString() /* TODO: When I can be bothered automate this to match Freya's version automatically. */
def buildNumber = (System.getenv('CI') ? System.getenv('BUILD_NUMBER') : '1243')

processResources {
    //inject values into app.properties
    filesMatching("**/app.properties") {
        filter ReplaceTokens, tokens: [
                "project.version"   : project.version,
                "project.groupId"   : project.group,
                "project.artifactId": project.ext.moduleName,
                "env.BUILD_NUMBER"  : buildNumber,
                "env.BUILD_TIME"    : System.currentTimeMillis() + ''
        ]
    }
}

build {
    doLast {
        println 'Version: ' + version;
        if (System.getProperty("user.name").toLowerCase(Locale.ROOT) == "draper" & System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))  { /* Only try to run the build script if logged in as Draper and on Windows*/
            println 'Making Release: ' + version + "_" + buildNumber;
            exec {
                commandLine 'cmd','/c','start', 'cmd.exe' ,'@cmd' , '/c',
                        'C:\\Users\\Draper\\.virtualenv\\global\\Scripts\\python.exe',
                        'C:\\Users\\guyre\\PycharmProjects\\GitUtils\\main.py',
                        '--version', version,
//                        '--pre-release',
                        '--build', buildNumber
            }
        }
    }
}


compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
String versionFromTag() {

    def headTag = grgit.tag.list().find {
        it.commit.getId() == grgit.head().getId()
    }

    // Uncommitted changes? -> should be SNAPSHOT
    // Also watch out for false positives in the CI build
    def clean = grgit.status().clean || System.getenv('CI') != null

    if (!clean) {
        println("Git state is dirty, setting version as snapshot")
    }

    if (headTag) {
        headTag.getName()
    } else {
        "${grgit.head().id}-SNAPSHOT"
    }
}

//create a simple version file that we will be reading to create appropriate docker tags
void versionTxt() {
    new File("$projectDir/VERSION.txt").text = "$project.version\n"
}

versionTxt()
